{"name":"Abelana-gcp","tagline":"Abelana (means \"Share\" in Zulu) is a project that allows users to take photos and share them with their friends. ","body":"# Cloud-Abelana-Go\r\n\r\n![Abelana](http://googlecloudplatform.github.io/abelana-gcp/images/0001.0001.png)\r\n![logo](http://googlecloudplatform.github.io/abelana-gcp/images/image05.png)\r\n\r\n![Architecture](http://googlecloudplatform.github.io/abelana-gcp/images/architecture.png)\r\n\r\nAbelana (means \"Share\" in Zulu) is a project that allows users to take photos and share them with\r\ntheir friends. This project is for the [Google Cloud Platform](https://cloud.google.com/).\r\n\r\nThe Cloud apps were written by Les Vogel and Francesc Campoy Flores. For questions and comments,\r\nplease join the [Google Group](https://groups.google.com/forum/#!forum/abelana-app).\r\n\r\nDisclaimer: This application is for educational purposes only and is not a Google product or service.\r\n\r\n# This is a work in progress -- It is incomplete -- Please be patient!\r\nThe goal of this project is to help you learn how to create your applications in the cloud. We will\r\nbe supporting this project with videos and additional material.\r\n\r\n## Project setup, installation, and configuration (Not yet enough to get it running)\r\n\r\nHow do I, as a developer, bring this project up as my own Google Cloud Platform project?\r\n\r\n1. Grab the project from GitHub\r\n  * Following the Go guidelines, the project belongs in your GOPATH (ours is ~/go).\r\n  * The files go into $GOPATH/src/github.com/GoogleCloudPlatform/abelana-gcp.\r\n  * There are 3 Appe Engine applications:\r\n    * **default** - the main website, supports identity-toolkit sign-on. (We took their sample).\r\n    * **endpoints** - Where most of the action occurs.\r\n    * **notice** - Takes [Object Change Notifications](https://cloud.google.com/storage/docs/object-change-notification) from Google Cloud Storage and connects with the Image magick for resizing and re-encoding. Then uploads to GCS, and notifies endpoints.\r\n  * There is also a third party directory of code we modified.\r\n  * The GCE app\r\n    * **imagemagick** - the docker component for hosting imagemagick.\r\n  * [Redis](http://redis.io/) -- Not much there, you should modify the config files for your instance yourself.\r\n\r\n1. Create a Cloud Project\r\n  * Using the [Developer Console](https://console.developers.google.com/project):\r\n    * Set up billing.\r\n    * Create the project.\r\n\r\n1. Click on **Permissions**.\r\n  * Take note of the App Engine Service Account. You'll need this later.\r\n\r\n1. Click on **Credentials**. You'll need the following:\r\n  * Client ID for Android application\r\n    * Please see [this page](https://developers.google.com/+/mobile/android/getting-started#step_1_enable_the_google_api), you\r\n    only need step 1 #5.\r\n  * Client ID for web application.\r\n    * redirect URI's should include:\r\n        * https://localhost/callback\r\n        * https//<your-appengine-project>.appspot.com/gitkit\r\n\r\n  * Service Account\r\n    * Generate and download a new P12 key.\r\n\r\n  * Public API Access\r\n    * Key for browser applications.\r\n    * Key for server applications.\r\n\r\n1. Click on **APIs**. You will need the following:\r\n  * Google Cloud Storage\r\n  * Google Cloud Storage JSON API\r\n  * Google Compute Engine\r\n  * Google Compute Engine Autoscaler API\r\n  * Google Compute Engine Instance Group Manager API\r\n  * Google Compute Engine Instance Group Updater API\r\n  * Google Compute Engine Instance Groups API\r\n  * Google+ API\r\n  * Identity Toolkit API\r\n\r\n1. Details for the Android Client\r\n  * How we create create the secretKey that resides on Android, used to access Cloud Storage:\r\n    ```java\r\n    static SecureRandom sr = new SecureRandom();\r\n\r\n    byte[] android = new byte[32];\r\n    byte[] server = new byte[32];\r\n    byte[] password = new byte[32];\r\n\r\n    sr.nextBytes(android);\r\n    sr.nextBytes(server);\r\n\r\n    System.out.println(\"android:  \"+ Base64.encodeToString(android, Base64.NO_PADDING | Base64.URL_SAFE));\r\n    System.out.println(\"server:   \"+ Base64.encodeToString(server, Base64.NO_PADDING | Base64.URL_SAFE));\r\n\r\n    for(int i = 0; i<32; i++) password[i] = (byte) (android[i] ^ server[i]);\r\n    System.out.println(\"passphrase: \"+ Base64.encodeToString(key, Base64.NO_PADDING | Base64.URL_SAFE));\r\n    ```\r\n\r\n    * Changing the password on the p12 file:\r\n        * `openssl pkcs12 -in < key.p12 > -nocerts -passin pass:notasecret -nodes -out /tmp/me.pem`\r\n        * `openssl pkcs12 -export -in /tmp/me.pem -out < mykey.p12 > -name privatekey -passout < New Passphrase > `\r\n\r\ne.g.\r\n* How to make curl requests while authenticated via oauth.\r\n* How to monitor background jobs.\r\n* How to run the app through a proxy.\r\n\r\n1. [Identity Toolkit]()\r\n  * TBD\r\n\r\n1. Google Cloud Storage\r\n  * TBD\r\n\r\n1. App Engine Modules\r\n   * In **abelana-gcp/endpoints**, create a folder called **private**\r\n   * Create **private/gitkit-server-config.json**\r\n   ```json\r\n   {\r\n  \"clientId\" : \"41652380zzzz-xxxxxxxxxxxxx.apps.googleusercontent.com\",\r\n  \"serverApiKey\" : \"yyyyyyyyyyyyyyyyyyyyyyyy\",\r\n  \"widgetUrl\" : \"https//<your-appengine-project>.appspot.com/gitkit\",\r\n  \"cookieName\" : \"gtoken\"\r\n}\r\n```\r\n   * Create **private/abelana-config.json**\r\n   ```json\r\n   {\r\n    \"AuthEmail\" : \"<Service Account Email>@developer.gserviceaccount.com\",\r\n    \"ProjectID\" : \"<YOUR PROJECT ID>\",\r\n    \"Bucket\" : \"<Your Upload bucket>\",\r\n    \"RedisPW\" : \"<YOUR REDIS PASSWORD>\",\r\n    \"Redis\" : \"<IP OF YOUR REDIS INSTANCE>:6379\",\r\n    \"TimelineBatchSize\" : 100,\r\n    \"UploadRetries\" : 5,\r\n    \"EnableBackdoor\" : false,\r\n    \"EnableStubs\" : false\r\n}\r\n   ```\r\n\r\n1. [Redis](http://redis.io/):\r\n  * Use one click install, to start, you only need 1 instance.\r\n  * Use **gcloud instance ssh ...** to connect with your instance.\r\n  * Edit /etc/redis/redis.config.\r\n  * Add `requirepass \"<YOUR REDIS PASSWORD>\"`.\r\n\r\n1. Image Magick\r\n\r\n1. What dependencies does it have (where are they expressed) and how do I install them?\r\n\r\n1. Can I see the project working before I change anything?\r\n\r\n1. How we set up Redis:\r\n  * Use one click install to get us 3 redis instances (master - 2 slaves).\r\n  * For each instance, set it to restart automatically.\r\n  * get the Internal & External IP address for the Master.\r\n  * Add a backup cron job to backup the db every 15 minutes.\r\n  * (Optional) Add firewall entries to all me to access from my development system.\r\n  * Add IP's to app config files.\r\n\r\n## Testing\r\n\r\nHow do I run the project's automated tests?\r\n\r\n* Unit Tests\r\n\r\n* Integration Tests\r\n\r\n\r\n## Deploying\r\n\r\n### How to set up the deployment environment\r\n\r\n* Add-ons, packages, or other dependencies required for deployment.\r\n* Required environment variables or credentials not included in git.\r\n* Monitoring services and logging.\r\n\r\n### How to deploy\r\n\r\n\r\n## Troubleshooting & useful tools\r\n\r\n### Examples of common tasks\r\n\r\ne.g.\r\n* How to make curl requests while authenticated via oauth.\r\n* How to monitor background jobs.\r\n* How to run the app through a proxy.\r\n\r\n### Suggested Reading\r\n* https://cloud.google.com/appengine/kb/general#static-ip\r\n* https://cloud.google.com/storage/docs/authentication\r\n\r\n## Contributing changes\r\n\r\n* See [CONTRIB.md](CONTRIB.md)\r\n\r\n\r\n## Licensing\r\n\r\n* See [LICENSE](LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}